<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jihoo Kang&#39;s Blog</title>
    <link>https://jihookang-kor.github.io/</link>
    <description>Recent content on Jihoo Kang&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 Apr 2023 20:23:25 +0900</lastBuildDate><atom:link href="https://jihookang-kor.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Coding Practice] 기사단원의 무기</title>
      <link>https://jihookang-kor.github.io/posts/weapon-of-knights/</link>
      <pubDate>Fri, 14 Apr 2023 20:23:25 +0900</pubDate>
      
      <guid>https://jihookang-kor.github.io/posts/weapon-of-knights/</guid>
      
        <description>기사단원의 무기 문제에 대한 설명은 프로그래머스 사이트를 참조바랍니다.
해당 문제는 결국 약수의 개수를 구하는 로직이 중점이 된다고 생각하는데, 저는 iterator를 2부터 시작하여 나눠지는 숫자가 나오면 더 이상 나누어 떨어지지 않을 때까지 나눈 뒤에 iterator를 다음 수로 바꿔주는 방식을 사용하였습니다. 처음 2를 제외하고는 다음 수 부터 굳이 짝수를 순회할 필요가 없으므로 3부터는 2씩 더하여 개수를 계산하였습니다. 소수만 순회할 수 있으면 좋았겠지만 더 복잡해질 것 같아서 홀수를 순회하는 방향으로 정했습니다.
class Solution { public int solution(int number, int limit, int power) { int answer = 0; // for문으로 순회하여 구한 약수의 개수를 저장.</description>
      
    </item>
    
    <item>
      <title>[Coding Practice] 덧칠하기</title>
      <link>https://jihookang-kor.github.io/posts/touch-up-paint/</link>
      <pubDate>Fri, 14 Apr 2023 20:14:34 +0900</pubDate>
      
      <guid>https://jihookang-kor.github.io/posts/touch-up-paint/</guid>
      
        <description>덧칠하기 문제에 대한 설명은 프로그래머스 사이트를 참조바랍니다.
해당 문제는 원래 Arrays.copyOfRange()를 이용하여 덧칠한 section을 제거하는 로직으로 해결하려고 했었습니다. 그러나 계속 시간초과가 일어나서 Arrays.copyOfRange()를 주석처리 해놓고 실행했더니 적어도 시간이 초과하지는 않는 것을 발견하고 다른 방법을 찾았고, 굳이 배열의 요소를 제거하지 않고 index만 규칙에 맞게 옮기면서 덧칠 횟수를 찾는 로직을 다시 작성하였습니다.
import java.util.*; class Solution { public int solution(int n, int m, int[] section) { // 최소값에서 m 만큼 더한 값 바로 전 값까지 배열에서 제거 후 answer++.</description>
      
    </item>
    
    <item>
      <title>[Coding Practice] 푸드 파이트 대회</title>
      <link>https://jihookang-kor.github.io/posts/food-fight-contest/</link>
      <pubDate>Thu, 13 Apr 2023 21:42:03 +0900</pubDate>
      
      <guid>https://jihookang-kor.github.io/posts/food-fight-contest/</guid>
      
        <description>푸드 파이트 대회 문제에 대한 설명은 프로그래머스 사이트를 참조바랍니다.
문제에서 원하는 것은 0으로 되어있는 가운데를 중심으로 양쪽이 대칭이 되는 숫자 구조인 String을 반환하는 것입니다. 그래서 저는 Stack을 이용하여 구현하였고, 먼저 Stack에 저장하면서 answer에도 같은 수를 추가하고 answer에 0을 더 추가한 뒤, Stack에 저장되어 있던 수를 차례대로 pop()으로 제거하면서 다시 answer에 같은 수를 저장하여 문제를 해결하였습니다.
구체적인 코드는 아래와 같습니다.
import java.util.*; class Solution { public String solution(int[] food) { // 가운데 0을 중심으로 양쪽이 대칭이다.</description>
      
    </item>
    
  </channel>
</rss>